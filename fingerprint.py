import hashlib
from zipfile import ZipFile
import os, fnmatch
from rarfile import RarFile
import random
import zlib
from hash_keylogger import keylogger_hashes

def compute_file_hash(file_path, algorithm):
    hash_func = hashlib.new(algorithm)
    
    with open(file_path, 'rb') as file:
        while chunk := file.read(8192):
            hash_func.update(chunk)
    try:
        return hash_func.hexdigest()
    except:
        return hash_func.hexdigest(16)
    
def crc(fileName):
    with open(fileName, 'rb') as fh:
        hash = 0
        while True:
            s = fh.read(65536)
            if not s:
                break
            hash = zlib.crc32(s, hash)
        return "%08x" % (hash & 0xffffffff)

root_path = os.path.abspath(os.path.dirname(__file__))
keylogger_path = f"{root_path}\keylogger_advanced.py"
algorithms = list(hashlib.algorithms_available)

random.seed()
hash_index = random.randint(0, len(keylogger_hashes)-1)
# print(hash_index)
mal_hashes = open(f"{root_path}/Mal-Hashes.txt", "a")
mal_hashes.write(f"\n- {keylogger_hashes[hash_index]} (Mal)\n")
mal_hashes.close()

pattern1 = "*.zip"
pattern2 = "*.rar"
test_files = []

with ZipFile(f"{root_path}/Task2.zip", 'r') as zObject: 
    zObject.extractall(path=root_path)
    for root, dirs, files in os.walk(f"{root_path}/Task2"):
        for filename in fnmatch.filter(files, pattern1):
            z = ZipFile(os.path.join(root, filename))
            z.extractall(f"{root_path}/Task2")
            z.close()
        for filename in fnmatch.filter(files, pattern2):
            r = RarFile(os.path.join(root, filename))
            r.extractall(f"{root_path}/Task2")
            r.close()
    zObject.close()

for name in os.listdir(f"{root_path}/Task2"):
    if not (name.endswith(".zip") or name.endswith(".rar")):
        test_files.append(f"{root_path}/Task2/{name}")
test_files.append(keylogger_path)
# print(test_files)

hashes = []
f = open(f"{root_path}/Mal-Hashes.txt", "r")
for line in f.readlines():
    line = line.replace("-", "").replace("(Mal)", "").strip()
    hashes.append(line)
f.close()
# print(hashes)

flag = False
for file in test_files:
    flag = False
    for algo in algorithms:
        current_hash = compute_file_hash(file, algo)
        for hash in hashes:
            if current_hash == hash:
                flag = True
                print(f"{file} is malicious. Detected by {hash} with algorithm {algo}.")
    crc_hash = crc(file)
    for hash in hashes:
        if crc_hash == hash:
            flag = True
            print(f"{file} is malicious. Detected by {hash} with algorithm crc.")
    if not flag:
        print(f"{file} is not malicious.")