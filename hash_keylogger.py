import hashlib
import os
import zlib

def compute_file_hash(file_path, algorithm):
    hash_func = hashlib.new(algorithm)
    
    with open(file_path, 'rb') as file:
        while chunk := file.read(8192):
            hash_func.update(chunk)
    try:
        return hash_func.hexdigest()
    except:
        return hash_func.hexdigest(16)

def crc(fileName):
    with open(fileName, 'rb') as fh:
        hash = 0
        while True:
            s = fh.read(65536)
            if not s:
                break
            hash = zlib.crc32(s, hash)
        return "%08x" % (hash & 0xffffffff)

root_path = os.path.abspath(os.path.dirname(__file__))
keylogger_path = f"{root_path}\keylogger_advanced.py"
algorithms = list(hashlib.algorithms_available)
# print(algorithms)

keylogger_hashes = []
for i in range(len(algorithms)):
    keylogger_hashes.append(compute_file_hash(keylogger_path, algorithms[i]))

keylogger_hashes.append(crc(keylogger_path))

# print(keylogger_hashes)